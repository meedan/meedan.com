// Responsive Mixin
// This is a simple mixin for media queries as described
// in Sass for Web Designers by Dan Cederholm
// see _variables.scss for variables defining the breakpoints

@mixin responsive($query) {
  @if $query == wide-screens {
    @media only screen and (max-width: $width-wide) { @content; }
  }
  @else if $query == desktop-screens {
    @media only screen and (max-width: $width-desktop) { @content; }
  }
  @else if $query == tablet-screens {
    @media only screen and (max-width: $width-tablet) { @content; }
  }
  @else if $query == mobile-screens {
    @media only screen and (max-width: $width-mobile) { @content; }
  }
  @else {
    @media only screen and ($query) { @content; }
  }
}


// Ref: Guardian's Frontend
@function aspect-ratio-height($x, $y, $startingWidth: 100%) {
    @return ($y / $x) * $startingWidth;
}

@mixin fix-aspect-ratio($x, $y, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    width: $startingWidth;
    padding-bottom: aspect-ratio-height($x, $y, $startingWidth);
    position: relative;
    overflow: hidden;
}

// Grid helpers
@mixin grid-item-columns($col-start, $col-end) {
  grid-column: #{$col-start}/#{$col-end};
}

@mixin grid-item-rows($row-start, $row-end) {
  grid-row: #{$row-start}/#{$row-end};
}

@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

@mixin set-color($color) {
  color: $color; 
  border-color: $color !important; 
  a { color: $color; }
  header .meedan svg {
    fill: $color;
  }
  header .menu-icon svg {
    stroke: $color;
  }
  &[data-menu] .menu-icon svg {
    stroke: $color;
  }
  h1,
  h1 a {
    color: $color !important;
  }
  .cursor {
    border-color: $color !important; 
  }
  .callout text {
    fill: $color !important;
  }
}